import datetime as dt
from typing import List, Optional

from fastapi import FastAPI, HTTPException, Query
from pydantic import BaseModel, Field

app = FastAPI()

class TradeDetails(BaseModel):
    buySellIndicator: str = Field(description="A value of BUY for buys, SELL for sells.")
    price: float = Field(description="The price of the Trade.")
    quantity: int = Field(description="The amount of units traded.")

class Trade(BaseModel):
    asset_class: Optional[str] = Field(alias="assetClass", default=None, description="The asset class of the instrument traded. E.g. Bond, Equity, FX...etc")
    counterparty: Optional[str] = Field(default=None, description="The counterparty the trade was executed with. May not always be available")
    instrument_id: str = Field(alias="instrumentId", description="The ISIN/ID of the instrument traded. E.g. TSLA, AAPL, AMZN...etc")
    instrument_name: str = Field(alias="instrumentName", description="The name of the instrument traded.")
    trade_date_time: dt.datetime = Field(alias="tradeDateTime", description="The date-time the Trade was executed")
    trade_details: TradeDetails = Field(alias="tradeDetails", description="The details of the trade, i.e. price, quantity")
    trade_id: str = Field(alias="tradeId", default=None, description="The unique ID of the trade")
    trader: str = Field(description="The name of the Trader")

trades_db = []


@app.post("/trades", response_model=Trade)
def create_trade(trade: Trade):
    # Generate a unique trade ID (you may use a different method in practice)
    trade.trade_id = str(len(trades_db) + 1)
    trades_db.append(trade)
    return trade

@app.get("/trades", response_model=List[Trade])
def get_trades(
    page: Optional[int] = Query(1, ge=1),
    limit: Optional[int] = Query(10, ge=1, le=100),
    sort: Optional[str] = Query(None, regex="^(tradeDateTime|tradeDetails.price)__(asc|desc)$"),
    search: Optional[str] = Query(None),
    assetClass: Optional[str] = Query(None),
    end: Optional[dt.datetime] = Query(None),
    maxPrice: Optional[float] = Query(None),
    minPrice: Optional[float] = Query(None),
    start: Optional[dt.datetime] = Query(None),
    tradeType: Optional[str] = Query(None),
):
    filtered_trades = trades_db
 
    if search:
        search = search.lower()
        filtered_trades = [
            trade
            for trade in filtered_trades
            if (
                search in trade.counterparty.lower()
                or search in trade.instrument_id.lower()
                or search in trade.instrument_name.lower()
                or search in trade.trader.lower()
            )
        ]
        
    if assetClass:
        filtered_trades = [t for t in filtered_trades if t.asset_class == assetClass]
    if end:
        filtered_trades = [t for t in filtered_trades if t.trade_date_time <= end]
    if maxPrice:
        filtered_trades = [t for t in filtered_trades if t.trade_details.price <= maxPrice]
    if minPrice:
        filtered_trades = [t for t in filtered_trades if t.trade_details.price >= minPrice]
    if start:
        filtered_trades = [t for t in filtered_trades if t.trade_date_time >= start]
    if tradeType:
        filtered_trades = [t for t in filtered_trades if t.trade_details.buySellIndicator == tradeType]

    if sort:
        field, order = sort.split("__")
        reverse = False if order == "asc" else True
        filtered_trades = sorted(filtered_trades, key=lambda t: getattr(t, field), reverse=reverse)

    start_index = (page - 1) * limit
    end_index = start_index + limit
    paginated_trades = filtered_trades[start_index:end_index]

    return paginated_trades

@app.get("/trades/{trade_id}", response_model=Trade)
def get_trade_by_id(trade_id: str):
    trade = next((t for t in trades_db if t.trade_id == trade_id), None)
    if not trade:
        raise HTTPException(status_code=404, detail="Trade not found")
    return trade
